# The # character at the beginning of a line indicates a comment. Use
# comments to describe your configuration.

input
{
    beats {
        port => 5000
        codec => multiline {
            pattern => "^\[%{WORD}\] \[%{TIMESTAMP_ISO8601}\]"
            negate => "true"
            what => "previous"
            auto_flush_interval => 10
        }
        # type is defined inside filebeats.yml
        #type => "static-files"
    }
    file {
        path=> "/tmp/logs/upstart/on-*.log"
        start_position => beginning
        ignore_older => 0
        sincedb_path => "/dev/null"
        codec => multiline {
            pattern => "^\[%{WORD}\] \[%{TIMESTAMP_ISO8601}\]"
            negate => "true"
            what => "previous"
            auto_flush_interval => 5
        }
        type => "static-logs"
    }
}

filter
{
    if "static-logs" == [type] {
        grok {
            match => {"message" => "\[%{WORD:loglevel}\] \[%{TIMESTAMP_ISO8601:date}\] \[%{NOTSPACE:process}\] \[%{NOTSPACE:module}\] \[%{NOTSPACE:runner}\] %{GREEDYDATA:event}\r\n -> %{NOTSPACE:caller}\r%{GREEDYDATA:content}"}
            add_tag => ["%{process}"]
        }

        if "_grokparsefailure" in [tags] {
            mutate {
                add_field => {
                    "process" => "others"
                }
            }
        }
    }

    if "runtime-beats" == [type] {

        # log transfered from beats doesn't have \r, remove it in regex
        grok {
            match => {"message" => "\[%{WORD:loglevel}\] \[%{TIMESTAMP_ISO8601:date}\] \[%{NOTSPACE:process}\] \[%{NOTSPACE:module}\] \[%{NOTSPACE:runner}\] %{GREEDYDATA:event}\n -> %{NOTSPACE:caller}\n%{GREEDYDATA:content}"}
            add_tag => ["%{process}"]
        }

        if "_grokparsefailure" in [tags] {

            # when there is caller only, without context, \n is not attached to the tail of the message
            # so remove \n in the end of the regex and filter again

            mutate {
                remove_tag => [ "_grokparsefailure" ]
            }

            grok {
                match => {"message" => "\[%{WORD:loglevel}\] \[%{TIMESTAMP_ISO8601:date}\] \[%{NOTSPACE:process}\] \[%{NOTSPACE:module}\] \[%{NOTSPACE:runner}\] %{GREEDYDATA:event}\n -> %{NOTSPACE:caller}"}
                add_tag => ["%{process}"]
            }

            if "_grokparsefailure" in [tags] {
                mutate {
                    add_field => {
                        "process" => "others"
                    }
                }
            }
        }
    }
}

output
{
    if "static-logs" == [type] {
        elasticsearch
        {
            index => "rackhd_log"
            codec => "json"
        }
    }
}
